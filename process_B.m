function outPath = process_B(inputPath, params, outputDir)
% PROCESS_B - MATLAB Step B processing.
% This function reads the intermediate file from step A and produces another
% intermediate result for step C.
%
% INPUTS:
%   inputPath (char/str): path to the input file produced by step A (e.g., JSON/CSV)
%   params    (struct)  : algorithm parameters (e.g., threshold, max_iter, seed)
%   outputDir (char/str): directory to write outputs
%
% OUTPUT:
%   outPath (char)      : path to the output generated by this step
%
% NOTE:
%   - Do NOT hardcode any absolute paths here.
%   - All user-adjustable values must come from 'params' or function arguments.
%   - Add/rename parameters in config.json as needed; they will flow here.

    arguments
        inputPath (1,1) {mustBeNonempty}
        params (1,1) struct
        outputDir (1,1) {mustBeNonempty}
    end

    assert(exist(inputPath, 'file') == 2, 'process_B: input file not found: %s', inputPath);
    if exist(outputDir, 'dir') ~= 7
        mkdir(outputDir);
    end

    % Example: read JSON (adapt to your real format)
    [~,~,ext] = fileparts(inputPath);
    switch lower(ext)
        case '.json'
            data = jsondecode(fileread(inputPath));
        case '.csv'
            data = readtable(inputPath);
        otherwise
            error('process_B: unsupported input extension: %s', ext);
    end

    % --- Your algorithm here ---
    % Example placeholder: apply a simple threshold
    threshold = getfield_default(params, 'threshold', 0.5); %#ok<GFLD>
    % (Replace this with your real logic)
    % e.g., data = some_transform(data, threshold);

    % --- Write intermediate output ---
    outPath = fullfile(outputDir, 'stepB_output.mat');
    save(outPath, 'data', 'threshold', '-v7'); % keep MAT version compatible

    fprintf('[process_B] Wrote: %s\n', outPath);
end

function val = getfield_default(s, name, defaultVal)
%GETFIELD_DEFAULT - safe parameter accessor with default fallback.
    if isfield(s, name)
        val = s.(name);
    else
        val = defaultVal;
    end
end
